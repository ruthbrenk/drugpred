#!/usr/bin/python

import os, sys
from openeye.oechem import *
from openeye.oespicoli import *

#### Declare protein atom structure

class prot_atom:
	def __init__(self,atomno,name,resname,resnum,sasa):
		self.atomno = atomno
		self.name = name.strip()
		self.resname = resname.strip()
		self.resnum = resnum
		self.internalname = str(atomno)+name.strip()+resname.strip()+str(resnum)
		self.protsasa = sasa
		self.cplxsasa = 0.0
		self.deltasasa = 0.0
		
	def update_cplxsasa(self,cplxsasa):
		self.cplxsasa = cplxsasa
	
	def update_deltasasa(self):
		#print self.protsasa, self.cplxsasa
		self.deltasasa = self.protsasa - self.cplxsasa
		#if self.deltasasa < 0.2*self.protsasa:
			#print self.atomno, self.name, self.resname, self.resnum, self.deltasasa
			#self.deltasasa = 0.0

### Declare list of hydrophobic residues and hydrophobicity index dictionary

hydrophobic_reslist = ['ALA', 'GLY', 'VAL', 'ILE', 'LEU', 'MET', 'PHE', 'PRO']
hydrophobicity_indices = {'ALA':1.8, 'ARG':-4.5, 'ASN':-3.5, 'ASP':-3.5, 'CYS':2.5, 'GLN':-3.5, 'GLU':-3.5, 'GLY':-0.4, 'HIS':-3.2, 'ILE':4.5, 'LEU':3.8, 'LYS':-3.9, 'MET':1.9, 'PHE':2.8, 'PRO': -1.6, 'SER':-0.8, 'THR':-0.7, 'TRP':-0.9, 'TYR':-1.3, 'VAL':4.2}

### Declare hydrophobic residue count variable

num_apolar_res = 0

### Declare values for grid spacing and probe radius during surface area calculations

proberad = 1.4
gridspacing = 0.5

### Change over to correct directory

curr_dir = sys.argv[3]
print curr_dir
os.chdir(curr_dir)

#### Call in protein
iprotfs = oemolistream(sys.argv[1])
prot = OEGraphMol()

if not OEReadMolecule(iprotfs,prot):
	print "Protein file unreadable"
	sys.exit(0)

#### Call in protein-superligand complex
icplxfs = oemolistream(sys.argv[2])
cplx = OEGraphMol()

if not OEReadMolecule(icplxfs,cplx):
	print "Complex file unreadable"
	sys.exit(0)

#### Print atomic accessibility for each of these

# PROTEIN
OEAssignBondiVdWRadii(prot)

surf = OESurface()

if not OEMakeAccessibleSurface(surf,prot,proberad,gridspacing):
	print "Could not create accessible surface for molecule"
	sys.exit(0)

areas = OEFloatArray(surf.GetNumTriangles())
OECalculateTriangleAreas(surf,areas)

atomareas = [0.0]*prot.GetMaxAtomIdx()

for i in range(surf.GetNumTriangles()):
	v1 = surf.GetTrianglesElement(i*3)
	v2 = surf.GetTrianglesElement(1*3+1)
	v3 = surf.GetTrianglesElement(1*3+2)
	
	a1 = surf.GetAtomsElement(v1)
	a2 = surf.GetAtomsElement(v2)
	a3 = surf.GetAtomsElement(v3)
	
	atomareas[a1] += areas[i]/3.0
	atomareas[a2] += areas[i]/3.0
	atomareas[a3] += areas[i]/3.0

protatoms = []

for atom in prot.GetAtoms():
	#print "atom", atom.GetIdx(), "area = %2.4f" % atomareas[atom.GetIdx()]
	tempatom = prot_atom(atom.GetIdx(),atom.GetName(),OEAtomGetResidue(atom).GetName(),OEAtomGetResidue(atom).GetResidueNumber(),atomareas[atom.GetIdx()])
	#print tempatom.internalname, tempatom.protsasa
	protatoms.append(tempatom)

# PROTEIN-SUPERLIGAND COMPLEX
OEAssignBondiVdWRadii(cplx)

isurf = OESurface()

if not OEMakeAccessibleSurface(isurf,cplx,proberad,gridspacing):
	print "Could not create accessible surface for molecule"
	sys.exit(0)

iareas = OEFloatArray(isurf.GetNumTriangles())
OECalculateTriangleAreas(isurf,iareas)

iatomareas = [0.0]*cplx.GetMaxAtomIdx()

for i in range(isurf.GetNumTriangles()):
	v1 = isurf.GetTrianglesElement(i*3)
	v2 = isurf.GetTrianglesElement(1*3+1)
	v3 = isurf.GetTrianglesElement(1*3+2)
	
	a1 = isurf.GetAtomsElement(v1)
	a2 = isurf.GetAtomsElement(v2)
	a3 = isurf.GetAtomsElement(v3)
	
	iatomareas[a1] += iareas[i]/3.0
	iatomareas[a2] += iareas[i]/3.0
	iatomareas[a3] += iareas[i]/3.0

cplxatoms = []

for atom in cplx.GetAtoms():
	tempatom = prot_atom(atom.GetIdx(),atom.GetName(),OEAtomGetResidue(atom).GetName(),OEAtomGetResidue(atom).GetResidueNumber(),iatomareas[atom.GetIdx()])
	cplxatoms.append(tempatom)

### Find atoms in protein, for which SASA value has changed

for protatom in protatoms:
	for cplxatom in cplxatoms:
		#print cplxatom.atomno, cplxatom.name, cplxatom.resname, cplxatom.resnum
		if cplxatom.atomno == protatom.atomno and cplxatom.name == protatom.name and cplxatom.resname == protatom.resname and cplxatom.resnum == protatom.resnum:
			#print cplxatom.internalname, protatom.protsasa, cplxatom.protsasa, (protatom.protsasa-cplxatom.protsasa)
			newsasa = cplxatom.protsasa
			protatom.update_cplxsasa(newsasa)
			protatom.update_deltasasa()
			break

for protatom in protatoms:
	#print protatom.atomno, protatom.name, protatom.deltasasa
	if protatom.deltasasa <> 0.0:
		print protatom.atomno, protatom.name, protatom.protsasa, protatom.deltasasa
